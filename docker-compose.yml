version: '3.8'

volumes:
  n8n_storage:
  postgres_data:
  qdrant_data:
  chroma_data:
  redis_data:
  portainer_data:
  backups:
  prometheus_data:
  grafana_data:
  adminer_data:

networks:
  demo:

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: ['demo']
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - REDIS_URL=redis://redis:6379/0  # For caching integration

services:
  # PostgreSQL with enhanced configuration
  postgres:
    image: postgres:16-alpine
    container_name: mydata-postgres
    hostname: postgres
    networks: ['demo']
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d  # For custom initialization
    ports:
      - 5432:5432
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  # Qdrant with resource limits
  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    hostname: qdrant
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 6333:6333
      - 6334:6334
    volumes:
      - qdrant_data:/qdrant/storage
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ChromaDB with Pinecone integration
  chromadb:
    image: chromadb/chroma:latest
    container_name: chromadb
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 8000:8000
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      IS_PERSISTENT: "TRUE"
      ANONYMIZED_TELEMETRY: "FALSE"
      CHROMA_PERSISTENT_PATH: "/chroma/chroma"
      CHROMA_SERVER_HOST: "0.0.0.0"
      CHROMA_PINECONE_API_KEY: ${PINECONE_API_KEY}  # Optional Pinecone integration
      CHROMA_PINECONE_ENV: ${PINECONE_ENV}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching
  redis:
    image: redis:alpine
    container_name: redis
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 6379:6379
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    networks: ['demo']
    ports:
      - 8025:8025
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8025"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Adminer for PostgreSQL & Qdrant
  adminer:
    image: adminer
    container_name: adminer
    networks: ['demo']
    restart: always
    ports:
      - 8080:8080
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Qdrant UI
  qdrant-ui:
    image: qdrant/qdrant
    container_name: qdrant-ui
    networks: ['demo']
    ports:
      - 6334:6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6334/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Prometheus & Grafana
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    networks: ['demo']
    ports:
      - 9090:9090
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - postgres
      - qdrant
      - chromadb
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090"]
      interval: 30s
      timeout: 10s
      retries: 5

  grafana:
    image: grafana/grafana
    container_name: grafana
    networks: ['demo']
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Portainer for Docker management
  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    networks: ['demo']
    ports:
      - 9000:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Automated backups
  backup:
    image: alpine:latest
    container_name: backup
    networks: ['demo']
    volumes:
      - backups:/backups
      - postgres_data:/var/lib/postgresql/data
      - chroma_data:/chroma/chroma
    command: >
      /bin/sh -c "
        while true; do
          # PostgreSQL Backup
          pg_dump -U ${POSTGRES_USER} -Fc ${POSTGRES_DB} > /backups/postgres_`date +%Y%m%d`.dump
          # ChromaDB Backup
          tar -czf /backups/chroma_`date +%Y%m%d`.tar.gz -C /chroma/chroma .
          # Wait 24 hours
          sleep 86400
        done
      "
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
    depends_on:
      - postgres
      - chromadb
    healthcheck:
      test: ["CMD", "test", "-f", "/backups/postgres_*.dump"]
      interval: 86400s
      timeout: 5s

  # N8n services (original setup with Redis integration)
  n8n-import:
    <<: *service-n8n
    hostname: n8n-import
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ./n8n/backup:/backup
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - REDIS_URL=redis://redis:6379/0

  n8n:
    <<: *service-n8n
    hostname: n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully
    environment:
      - REDIS_URL=redis://redis:6379/0
